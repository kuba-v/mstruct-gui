package cz.kfkl.mstruct.gui.model.phases;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collectors;

import org.jdom2.Element;

import cz.kfkl.mstruct.gui.model.OptionChoice;
import cz.kfkl.mstruct.gui.model.OptionUniqueElement;
import cz.kfkl.mstruct.gui.model.ParUniqueElement;
import cz.kfkl.mstruct.gui.model.ParamContainer;
import cz.kfkl.mstruct.gui.model.utils.XmlLinkedModelElement;
import cz.kfkl.mstruct.gui.xml.annotation.XmlAttributeProperty;
import cz.kfkl.mstruct.gui.xml.annotation.XmlElementList;
import cz.kfkl.mstruct.gui.xml.annotation.XmlElementName;
import cz.kfkl.mstruct.gui.xml.annotation.XmlUniqueElement;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;

@XmlElementName("ArbitraryTexture")
public class ArbitraryTextureElement extends XmlLinkedModelElement implements ParamContainer {

	private static final OptionChoice CHOICE_FREE_ALL = new OptionChoice("Free all", "Free All");
	private static final OptionChoice CHOICE_GENERATE = new OptionChoice("Generate");
	public static final OptionChoice CHOICE_READ = new OptionChoice("Read", "Read/Use Provided/Specified");

	@XmlAttributeProperty("Name")
	public StringProperty nameProperty = new SimpleStringProperty("ArbitraryTexture");
	@XmlAttributeProperty("Tag")
	public StringProperty tagProperty = new SimpleStringProperty("Current");

	/**
	 * <Option Name="ArbitraryTexture.choice" Choice="0" ChoiceName="None"/>
	 * <Option Name="ArbitraryTexture.choice" Choice="1" ChoiceName="Generate"/>
	 * <Option Name="ArbitraryTexture.choice" Choice="2" ChoiceName="Free all"/>
	 * <Option Name="ArbitraryTexture.choice" Choice="3" ChoiceName="Read"/>
	 */
	@XmlUniqueElement
	public OptionUniqueElement choice = new OptionUniqueElement("ArbitraryTexture.choice", 1,
			new OptionChoice("None", "None/Don't Use"), CHOICE_GENERATE, CHOICE_FREE_ALL, CHOICE_READ);

	@XmlElementList
	public ObservableList<IhklParElement> ihklParams = FXCollections.observableArrayList();

	private String phaseName = "UNKNOWN";

	@Override
	public void bindToElement(XmlLinkedModelElement parentModelElement, Element wrappedElement) {
		super.bindToElement(parentModelElement, wrappedElement);

		XmlLinkedModelElement pme = getParentModelElement();
		if (pme instanceof PowderPatternCrystalsModel) {
			PowderPatternCrystalsModel pwdPatternCryst = (PowderPatternCrystalsModel) pme;
			phaseName = pwdPatternCryst.getName();
		}

		for (IhklParElement ihklPar : ihklParams) {
			ihklPar.setPhaseName(phaseName);
		}
	}

	@Override
	public String formatParamContainerName() {
		return "Arbitrary Texture";
	}

	@Override
	public List<ParUniqueElement> getParams() {
		List<ParUniqueElement> list = new ArrayList<>();
		list.addAll(ihklParams);
		return list;
	}

	@Override
	public List<? extends ParamContainer> getInnerContainers() {
		return Collections.emptyList();
	}

	/**
	 * Called when mstruct generates new IHKL parameters (the
	 * {@link #canUpdateIhklParas()} returns true). updates all values except the
	 * fitted value.
	 */
	public void updateIhklParams(ArbitraryTextureElement fittedArbitraryTexture) {
		Map<String, IhklParElement> currentParsByName = ihklParams.stream()
				.collect(Collectors.toMap(IhklParElement::getName, Function.identity(), (par1, par2) -> {
					// TODO validation warning can be reported here?
					return par2;
				}));

		for (IhklParElement fittedPar : fittedArbitraryTexture.ihklParams) {
			String name = fittedPar.getName();
			IhklParElement currentPar = currentParsByName.remove(name);
			if (currentPar == null) {
				currentPar = new IhklParElement();
				ihklParams.add(currentPar);
			}

			currentPar.updateFrom(fittedPar);
			currentPar.setPhaseName(phaseName);
		}
		ihklParams.removeAll(currentParsByName.values());

		Collections.sort(ihklParams, IhklParElement.IHKL_PAR_COMPARATOR);
	}

	/**
	 * If the IHKL parameters should be updated when they are generated by the
	 * mStruct.
	 */
	public boolean canUpdateIhklParas() {
		OptionChoice selectedChoice = choice.getSelectedChoice();
		return selectedChoice == CHOICE_GENERATE || selectedChoice == CHOICE_FREE_ALL;
	}

}
